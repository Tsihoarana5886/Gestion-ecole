<style>
  .filter{
    display: flex;
    width: 100%;
    height: 50px;
    padding-top: 5px;
  }
</style>
<h1 class="title">Liste Eleves</h1>
<div class="filter">
  <p>Filtre :</p>
  <%= form_for @conn, Routes.eleves_path(@conn, :getFilter), [method: :get, as: :search], fn f -> %>
      <%= select(f, :sexes_id, Enum.map(@sexe, &{&1.nom, &1.id}), prompt: "Par sexe") %>
      <%= select(f, :classe_id, Enum.map(@classe, &{&1.nomclasse, &1.id}), prompt: "Par classe") %>
  <%= submit "Filtre" %>
  <% end %>
</div>
<table id="tb-auth" class="table-sortable" >
    <thead>
      <tr>
        <th>Nom</th>
        <th>Prenom</th>
        <th>Age</th>
        <th>Sexe</th>
        <th>Classe</th>
        <th></th>
      </tr>
    </thead>
    <tbody>
      <%= for eleves <- @eleves do %>
          <%= form_for @conn, Routes.notes_path(@conn, :show_notes_study), [method: :get, as: :show], fn f -> %>
             <%= hidden_input f, :id, value: eleves.id %>
             <%= hidden_input f, :idclasse, value: eleves.idclasse %>
            <tr>
              <td><%= eleves.nom %></td>
              <td><%= eleves.prenom %></td>
              <td><%= eleves.age %>  <span>ans</span></td>
              <td><%= eleves.sexe %></td>
              <td><%= eleves.classe %></td>
              <th><%= submit "Voir les notes" %></th>
            </tr>
          <% end %>
      <% end %>
    </tbody>
  </table>
  <script>
    function sortTableByColumn(table, column, asc = true) {
      const dirModifier = asc ? 1 : -1;
      const tBody = table.tBodies[0];
  
      console.log(tBody)
      const rows = Array.from(tBody.querySelectorAll("tr"));
  
      // Sort each row
      const sortedRows = rows.sort((a, b) => {
          const aColText = a.querySelector(`td:nth-child(${ column + 1 })`).textContent.trim();
          const bColText = b.querySelector(`td:nth-child(${ column + 1 })`).textContent.trim();
  
          return aColText > bColText ? (1 * dirModifier) : (-1 * dirModifier);
      });
  
      // Remove all existing TRs from the table
      while (tBody.firstChild) {
          tBody.removeChild(tBody.firstChild);
      }
  
      // Re-add the newly sorted rows
      tBody.append(...sortedRows);
  
      // Remember how the column is currently sorted
      table.querySelectorAll("th").forEach(th => th.classList.remove("th-sort-asc", "th-sort-desc"));
      table.querySelector(`th:nth-child(${ column + 1})`).classList.toggle("th-sort-asc", asc);
      table.querySelector(`th:nth-child(${ column + 1})`).classList.toggle("th-sort-desc", !asc);
  }
  
  document.querySelectorAll(".table-sortable th").forEach(headerCell => {
      headerCell.addEventListener("click", () => {
          const tableElement = headerCell.parentElement.parentElement.parentElement;
          const headerIndex = Array.prototype.indexOf.call(headerCell.parentElement.children, headerCell);
          const currentIsAscending = headerCell.classList.contains("th-sort-asc");
  
          sortTableByColumn(tableElement, headerIndex, !currentIsAscending);
      });
  });
  
  </script>